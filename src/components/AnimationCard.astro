---
const { animationName = "", className = "" ,delay="0ms" } = Astro.props;
---

<div class={animationName + " animation-block " + className} style={"transition-delay: "+ delay+" ;"}>
    <slot />
</div>

<style>
/*
    shorthand to use single/multiple transition effect
    transition: transition-property-1 transition-duration-1 transition-timing-function-1 transition-delay-1 , transition-property-2 transition-duration-2 transition-timing-function-2 transition-delay-2, transition-property-3 transition-duration-3 transition-timing-function-3 transition-delay-3, ....................., transition-property-N transition-duration-N transition-timing-function-N transition-delay-N; 
*/

/*
The .block class sets up the initial state with opacity 0 and a transition.
The .slide-up, .slide-right, .zoom-in, and .zoom-out classes define the initial transformations.
The .show class removes the transformations and sets opacity to 1, triggering the animations.
The .child elements follow the same pattern.
*/

.animation-block {
    height: 100%;
    width: 100%;
    /* margin: 20px 0; */
    opacity: 0;
    transition: transform 1s, opacity 1s;
    transition-delay: 100ms;

}
.animation-block.show { opacity: 1; }

.animation-block.slide-up { transform: translateY(50px); }
.animation-block.slide-up.show { transform: translateY(0); }

.animation-block.slide-down { transform: translateY(-50px); }
.animation-block.slide-down.show { transform: translateY(0); }

.animation-block.slide-left { transform: translateX(50px); }
.animation-block.slide-left.show { transform: translateX(0); }

.animation-block.slide-right { transform: translateX(-50px); }
.animation-block.slide-right.show { transform: translateX(0); }

.animation-block.zoom-in { transform: scale(0.5); }
.animation-block.zoom-in.show { transform: scale(1); }

.animation-block.zoom-out { transform: scale(1.5); }
.animation-block.zoom-out.show { transform: scale(1); }

.animation-block > .child {
    margin: 5px;
    /* width: 30px;
    height: 30px; */
    opacity: 0;
    transition: transform 1s, opacity 1s;
}
.animation-block > .child.show { opacity: 1; }

</style>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const handleScroll = () => {
        document.querySelectorAll('.animation-block').forEach(block => {
            const rect = block.getBoundingClientRect();

            // if block/div come on screen
            if (rect.top < window.innerHeight && rect.bottom > 0) { 
                block.classList.add('show');
                // block.querySelectorAll('.child').forEach(child => {
                //     child.classList.add('show');
                // });
            }

        });
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Initial check on page load

    return () => window.removeEventListener('scroll', handleScroll);
});

</script>